#include <stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node *next;
    struct node *prev;
    
};
struct node *head,*temp,*newnode;

void insertAtFirst()
{ 
    newnode=malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d",&newnode->data);
    
    if(head==NULL)
    {   head=newnode;
        newnode->next=NULL;
        newnode->prev=NULL;
    }
    else
    {
        newnode->next=head;
        head->prev=newnode;
        head=newnode;
        newnode->prev=NULL;
    }

}

void insertAtLast()
{
    newnode=malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d",&newnode->data);
    
    if(head==NULL)
    {   head=newnode;
        newnode->next=NULL;
        newnode->prev=NULL;
    }
  else{  
    temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    newnode->next=NULL;
    temp->next=newnode;
    newnode->prev=temp;
    
    
  }
}

void insertAtpos()
{   int pos;
    newnode=malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d",&newnode->data);
    printf("Enter the position\n");
    scanf("%d",&pos);
    if(head==NULL)
    {   head=newnode;
        newnode->next=NULL;
        newnode->prev=NULL;
    }
    else 
    { temp=head;
    int count=0;
      while(temp->next!=NULL)
      {
          temp=temp->next;
          count++;
      }
      
     if(pos<1||pos>count)
    {
        printf("Invalid position\n");
        
    }
    else
    {
        int i=1;
        temp=head;
        if(i<pos-1)
        {
             temp=temp->next;
             i++;
        }
        newnode->next=temp->next;
        temp->next->prev=newnode;
        temp->next=newnode;
        newnode->prev=temp;
        
    }
        
    }
    
    

}
void insertAfterpos()
{
    int pos;
    newnode=malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d",&newnode->data);
    
    if(head==NULL)
    {   head=newnode;
        newnode->next=NULL;
        newnode->prev=NULL;
    }
    else 
    { 
        printf("Enter the position\n");
        scanf("%d",&pos);
        temp=head;
    int count=0;
      while(temp->next!=NULL)
      {
          temp=temp->next;
          count++;
      }
      
     if(pos<1||pos>count)
    {
        printf("Invalid position\n");
        
    }
    else
    {
        int i=1;
        temp=head;
        if(i<pos)
        {
             temp=temp->next;
             i++;
        }
        newnode->next=temp->next;
        temp->next->prev=newnode;
        temp->next=newnode;
        newnode->prev=temp;
        
    }
        
    }
    
    

}
void deleteAtFirst()
{
    if (head == NULL)
    {
        printf("List is already empty.\n");
        return;
    }

    temp = head; // Store the current head
    head = head->next; // Move head to next node

    if (head != NULL)
        head->prev = NULL;

    free(temp); // Free memory of old head

    printf("First node deleted successfully.\n");
}

void deleteAtLast()
{
    if(head==NULL)
    printf("empty DLL");
    
    else
    {
        temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
            
        }
        temp->prev->next=NULL;
        free(temp);
    }
}





void display()
{ temp=head;
  while(temp!=NULL)
  {
      printf("%d\n",temp->data);
      temp=temp->next;
  } 
    
}





int main()
{  head=NULL;
    int choice,ch;
do{
    printf("Enter your choice\n1.insert at first\n2.insert at last\n3.insert at position\n4.insert After position\n5.deleteAtFirst\n6.deleteAtLast\n7.display\n8.exit\n");
     scanf("%d",&ch);
    
     switch(ch)
     {
        case 1:insertAtFirst();
                break;
        
        case 2:insertAtLast();
                break;
        
        case 3:insertAtpos();
                break;
        case 4:insertAfterpos();
                break;
        case 5:deleteAtFirst();
                break;
        case 6:deleteAtLast();
                break;
        case 7:display();
                break;
        case 8:exit(0);
                break;
        default:printf("invalid position\n");       
        
     }
     printf("Enter 1 if you want to continue\n");
     scanf("%d",&choice);
     
    }while(choice==1);


    return 0;
}
